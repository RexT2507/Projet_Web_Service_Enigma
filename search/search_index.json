{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projet Web Service Enigma Vous pouvez acc\u00e9der au code source du projet. Membres du groupe MARMIER Baptiste Objectifs du projet Le finalit\u00e9 du projet est de tenter de bruteforcer des messages chiffr\u00e9s dont on ne connait pas la cl\u00e9 priv\u00e9e (elle est priv\u00e9e et donc connue seulement par les gens qui y ont droit, \u00e0 savoir toute l'arm\u00e9e Allemande durant la guerre et notez d'ailleurs pour votre information que ces cl\u00e9s changeaient tous les jours, connues \u00e0 l'avance par qui de droit, not\u00e9es sur un petit post-it) une application serveur qui fournit des tokens d'authentification (lorsqu'on lui fournit des paires login/pass valides) on parle d'une autorit\u00e9 de certification (CA donc ou AS souvent Authorization Serveur). une autre application serveur, potentiellement dans un autre langage, qui va v\u00e9rifier que les requ\u00eates qu'il re\u00e7oit sont bien sign\u00e9es via ce token avant de fournir des \u00e9l\u00e9ments pour le brute force. On parle ici de notre application serveur. Ce serveur va servir \u00e0 orchestrer le travai de brute force et il ne va pas lui m\u00eame tenter de d\u00e9crypter (ou d\u00e9chiffrer par un moyen inpropre) quoi que ce soit mais simplement charger chaque client qui s'y connectera de faire une partie du travail. une application client qui va permettre de : s'authentifier aupr\u00e8s du premier serveur (et stocker le token en m\u00e9moire) demander au serveur de lui fournir un morceau de code qu'il pourra ex\u00e9cuter pour tenter de bruteforcer les messages demander au serveur un batch \u00e0 tenter, compos\u00e9e de : un message chiffr\u00e9, une cl\u00e9 \u00e0 partir de laquelle on doit tenter de d\u00e9chiffrer, une cl\u00e9 \u00e0 laquelle on doit arr\u00eater. On parlera de batch pour identifier ce trinome, c'est plus simple \u00e0 comprendre le client tente ensuite de casser le code avec l'algorithme que le serveur lui a fourni et pour un batch donn\u00e9, puis : si cela a fonctionn\u00e9, il en informe le serveur avec la combinaison qui a fonctionn\u00e9 et le message envoy\u00e9 en clair si cela a \u00e9chou\u00e9, il en informe le serveur qui va pouvoir rayer ce batch de la liste des tests \u00e0 effectuer","title":"Accueil"},{"location":"#projet-web-service-enigma","text":"Vous pouvez acc\u00e9der au code source du projet.","title":"Projet Web Service Enigma"},{"location":"#membres-du-groupe","text":"MARMIER Baptiste","title":"Membres du groupe"},{"location":"#objectifs-du-projet","text":"Le finalit\u00e9 du projet est de tenter de bruteforcer des messages chiffr\u00e9s dont on ne connait pas la cl\u00e9 priv\u00e9e (elle est priv\u00e9e et donc connue seulement par les gens qui y ont droit, \u00e0 savoir toute l'arm\u00e9e Allemande durant la guerre et notez d'ailleurs pour votre information que ces cl\u00e9s changeaient tous les jours, connues \u00e0 l'avance par qui de droit, not\u00e9es sur un petit post-it) une application serveur qui fournit des tokens d'authentification (lorsqu'on lui fournit des paires login/pass valides) on parle d'une autorit\u00e9 de certification (CA donc ou AS souvent Authorization Serveur). une autre application serveur, potentiellement dans un autre langage, qui va v\u00e9rifier que les requ\u00eates qu'il re\u00e7oit sont bien sign\u00e9es via ce token avant de fournir des \u00e9l\u00e9ments pour le brute force. On parle ici de notre application serveur. Ce serveur va servir \u00e0 orchestrer le travai de brute force et il ne va pas lui m\u00eame tenter de d\u00e9crypter (ou d\u00e9chiffrer par un moyen inpropre) quoi que ce soit mais simplement charger chaque client qui s'y connectera de faire une partie du travail. une application client qui va permettre de : s'authentifier aupr\u00e8s du premier serveur (et stocker le token en m\u00e9moire) demander au serveur de lui fournir un morceau de code qu'il pourra ex\u00e9cuter pour tenter de bruteforcer les messages demander au serveur un batch \u00e0 tenter, compos\u00e9e de : un message chiffr\u00e9, une cl\u00e9 \u00e0 partir de laquelle on doit tenter de d\u00e9chiffrer, une cl\u00e9 \u00e0 laquelle on doit arr\u00eater. On parlera de batch pour identifier ce trinome, c'est plus simple \u00e0 comprendre le client tente ensuite de casser le code avec l'algorithme que le serveur lui a fourni et pour un batch donn\u00e9, puis : si cela a fonctionn\u00e9, il en informe le serveur avec la combinaison qui a fonctionn\u00e9 et le message envoy\u00e9 en clair si cela a \u00e9chou\u00e9, il en informe le serveur qui va pouvoir rayer ce batch de la liste des tests \u00e0 effectuer","title":"Objectifs du projet"},{"location":"rest/","text":"Web Service Authentification Vous pouvez acc\u00e9der au code source du projet. Pour la partie authentification du projet j'ai d\u00e9cid\u00e9 mettre en place une API Rest sous Express en JavaScript avec le FrameWork Node.JS Les modules utilis\u00e9s dans le projet On va lister ces modules : express - Le module Express fournit de petits outils robustes pour les serveurs HTTP, ce qui en fait une excellente solution pour les applications \u00e0 page unique, les sites Web, les hybrides ou les API HTTP publiques. mongoose - Le module Mongoose fournit une solution simple bas\u00e9e sur un sch\u00e9ma pour mod\u00e9liser les donn\u00e9es de votre application. Il comprend la conversion de type int\u00e9gr\u00e9e, la validation, la cr\u00e9ation de requ\u00eates, les crochets de logique m\u00e9tier et plus encore, pr\u00eats \u00e0 l'emploi. bcrypt - Le module bcrypt facilite le hachage et la comparaison des mots de passe dans Node. Si vous venez d'un arri\u00e8re-plan PHP, ceux-ci sont \u00e0 peu pr\u00e8s \u00e9quivalents \u00e0 password_hash () et password_verify (). jsonwebtoken - Le module JSON Web Token (JWT) est une norme ouverte (RFC 7519) qui d\u00e9finit une mani\u00e8re compacte et autonome de transmettre en toute s\u00e9curit\u00e9 des informations entre les parties en tant qu'objet JSON. Connexion \u00e0 la MongoDB Dans un premier temps je cr\u00e9e mon model User : Ensuite j'importe le fichier dans mon fichier contenant les routes de mon API. Je d\u00e9finis l'url et le nom de la base de donn\u00e9es MongoDB. Je param\u00e8tre les options et j'effectue la connexion. Une fois la connexion effectu\u00e9, j'ouvre la base de donn\u00e9es, et s'il y a une erreur je l'affiche. Fonction de v\u00e9rification du Token Afin de v\u00e9rifier le Token lors du login, j'ai mis en place une fonction de v\u00e9rification. M\u00e9thode de cr\u00e9ation d'un nouvel utilisateur Dans un premier temps nous encryptons le mot de passe, puis on r\u00e9cup\u00e8re l'email de l'utilisateur, enfin on attribue un id et on cr\u00e9e le nouvel utilisateur dans lequel on signe l'id avec un token. M\u00e9thode de connexion d'un utilisateur On compare l'email afin de savoir si l'utilisateur fait parti de la base de donn\u00e9es, on compare le mot de passe enfin si les deux \u00e9tapes ont \u00e9t\u00e9 effectu\u00e9s avec succ\u00e8s on attribue un token avec une date d'expiration et les informations de l'utilisateur. M\u00e9thode d'acc\u00e8s au profile utilisateur Il est possible d'acc\u00e9der aux informations de l'utilisateur, cependant la route n'est accessible uniquement aux personnes qui ont un token valide.","title":"Web Service Authentification"},{"location":"rest/#web-service-authentification","text":"Vous pouvez acc\u00e9der au code source du projet. Pour la partie authentification du projet j'ai d\u00e9cid\u00e9 mettre en place une API Rest sous Express en JavaScript avec le FrameWork Node.JS","title":"Web Service Authentification"},{"location":"rest/#les-modules-utilises-dans-le-projet","text":"","title":"Les modules utilis\u00e9s dans le projet"},{"location":"rest/#connexion-a-la-mongodb","text":"","title":"Connexion \u00e0 la MongoDB"},{"location":"rest/#fonction-de-verification-du-token","text":"","title":"Fonction de v\u00e9rification du Token"},{"location":"rest/#methode-de-creation-dun-nouvel-utilisateur","text":"","title":"M\u00e9thode de cr\u00e9ation d'un nouvel utilisateur"},{"location":"rest/#methode-de-connexion-dun-utilisateur","text":"","title":"M\u00e9thode de connexion d'un utilisateur"},{"location":"rest/#methode-dacces-au-profile-utilisateur","text":"","title":"M\u00e9thode d'acc\u00e8s au profile utilisateur"},{"location":"soap/","text":"Web Socket Caesar Vous pouvez acc\u00e9der au code source du projet. Pour la partie envoie de message chiffr\u00e9 ainsi que des cl\u00e9s pour les d\u00e9coder, j'ai mit en place un Web Socket SOAP. Les modules utilis\u00e9s dans le projet On va lister ces modules : express - Le module Express fournit de petits outils robustes pour les serveurs HTTP, ce qui en fait une excellente solution pour les applications \u00e0 page unique, les sites Web, les hybrides ou les API HTTP publiques. soap - Ce module vous permet de vous connecter aux services Web \u00e0 l'aide de SOAP. Il fournit \u00e9galement un serveur qui vous permet d'ex\u00e9cuter vos propres services SOAP.z body-parser - Analysez les corps des requ\u00eates entrantes dans un middleware avant vos gestionnaires, disponibles sous la propri\u00e9t\u00e9 req.body. caesar-encrypt - Le chiffrement C\u00e9sar, \u00e9galement connu sous le nom de chiffrement par d\u00e9calage, est l'une des formes de chiffrement les plus simples. Il s'agit d'un chiffre de substitution o\u00f9 chaque lettre du message d'origine (appel\u00e9e le texte en clair) est remplac\u00e9e par une lettre correspondant \u00e0 un certain nombre de lettres vers le haut ou vers le bas dans l'alphabet random - Bienvenue dans le module le plus al\u00e9atoire sur npm socket.io - Socket.IO permet une communication bidirectionnelle en temps r\u00e9el bas\u00e9e sur les \u00e9v\u00e9nements. Cr\u00e9ation du serveur SOAP Dans un premier temps on cr\u00e9e le serveur SOAP. Mise en place des services du SOAP On cr\u00e9e des services afin de mettre en place les fonctions du SOAP Encodage de Cesar On initialise M\u00e9thode d'envoi de cl\u00e9 M\u00e9thode de d\u00e9cryptage des chaines de caract\u00e8re","title":"Web Socket Caesar"},{"location":"soap/#web-socket-caesar","text":"Vous pouvez acc\u00e9der au code source du projet. Pour la partie envoie de message chiffr\u00e9 ainsi que des cl\u00e9s pour les d\u00e9coder, j'ai mit en place un Web Socket SOAP.","title":"Web Socket Caesar"},{"location":"soap/#les-modules-utilises-dans-le-projet","text":"","title":"Les modules utilis\u00e9s dans le projet"},{"location":"soap/#creation-du-serveur-soap","text":"","title":"Cr\u00e9ation du serveur SOAP"},{"location":"soap/#mise-en-place-des-services-du-soap","text":"","title":"Mise en place des services du SOAP"},{"location":"soap/#encodage-de-cesar","text":"","title":"Encodage de Cesar"},{"location":"soap/#methode-denvoi-de-cle","text":"","title":"M\u00e9thode d'envoi de cl\u00e9"},{"location":"soap/#methode-de-decryptage-des-chaines-de-caractere","text":"","title":"M\u00e9thode de d\u00e9cryptage des chaines de caract\u00e8re"}]}